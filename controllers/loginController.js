const jwt = require('jsonwebtoken'); 
const bcrypt = require('bcrypt');
const SECRET = process.env.JWT_SECRET; // üëâ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô .env
const pool = require('../config/db'); 

exports.loginUser = async (req, res) => {
  const { email, password } = req.body;
  console.log('üì• Login attempt:', email); // ‚úÖ log email ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

  try {
    const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    if (result.rows.length === 0) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:', email);
      return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });
    }

    const user = result.rows[0];
    console.log('‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', user);

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      console.warn('‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á:', email);
      return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    const tokenPayload = {
      user_id: user.user_id,
      google_id: null,
      display_name: user.display_name,
      email: user.email,
      password: user.password,
      birthdate: user.birthdate,
      gender: user.gender,
      phone: user.phone,
      created_at: user.created_at,
      is_verified: user.is_verified,
      photo_url: user.photo_url,
      providers: user.providers,
      is_seller: user.is_seller
    };

    console.log('üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', tokenPayload);

    const token = jwt.sign(tokenPayload, SECRET, { expiresIn: '7d' });

    console.log('üéüÔ∏è Token ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:', token);

    res.status(200).json({
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      token,
      user: {
        user_id: user.user_id,
        display_name: user.display_name,
        email: user.email,
        google_id: null,
        photo_url: user.photo_url,
        birthdate: user.birthdate,
        gender: user.gender,
        phone: user.phone,
        created_at: user.created_at,
        is_seller: user.is_seller,
      },
    });
  } catch (err) {
    console.error('‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Login:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};

