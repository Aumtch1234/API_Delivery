const pool = require('../config/db');

exports.marketsController = async (req, res) => {
  const owner_id = req.user?.user_id;
  const { shop_name, shop_description, open_time, close_time, latitude, longitude } = req.body;
  const shop_logo_url = req.file?.path;

  if (!owner_id) {
    return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö owner_id ‡∏à‡∏≤‡∏Å token' });
  }

  if (!shop_name || !shop_description || !shop_logo_url || !open_time || !close_time) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }

  try {
    await pool.query(
      `UPDATE users SET is_seller = true WHERE user_id = $1`,
      [owner_id]
    );

    console.log('üì• Received from frontend:', {
      owner_id,
      shop_name,
      shop_description,
      shop_logo_url,
      open_time,
      close_time,
      latitude,
      longitude
    });

    const result = await pool.query(
      `INSERT INTO markets (owner_id, shop_name, shop_description, shop_logo_url, open_time, close_time, latitude, longitude)
   VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   RETURNING *`,
      [owner_id, shop_name, shop_description, shop_logo_url, open_time, close_time, latitude, longitude]
    );


    res.status(200).json({
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      market: result.rows[0],
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: error.message });
  }
};

exports.updateMarketController = async (req, res) => {
  const { id } = req.params;
  const { shop_name, shop_description, open_time, close_time } = req.body;
  const shop_logo_url = req.file?.path;

  if (!shop_name || !shop_description || !open_time || !close_time) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }

  try {
    const updateFields = [
      `shop_name='${shop_name}'`,
      `shop_description='${shop_description}'`,
      `open_time='${open_time}'`,
      `close_time='${close_time}'`
    ];

    if (shop_logo_url) {
      updateFields.push(`shop_logo_url='${shop_logo_url}'`);
    }

    const updateQuery = `
      UPDATE markets
      SET ${updateFields.join(', ')}
      WHERE market_id=$1
      RETURNING *
    `;

    const result = await pool.query(updateQuery, [id]);

    res.status(200).json({
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      market: result.rows[0],
    });

  } catch (error) {
    console.error('‚ùå Error updating market:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: error.message });
  }
};

exports.getMyMarket = async (req, res) => {
  const userId = req.user?.user_id;
  try {
    const result = await pool.query('SELECT * FROM markets WHERE owner_id = $1', [userId]);
    if (result.rows.length === 0)
      return res.status(404).json({ message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤' });

    res.status(200).json({ message: '‡∏î‡∏π‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', market: result.rows[0] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
};

exports.addFood = async (req, res) => {
  console.log("üëâ [addFood] req.user:", req.user); // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ user_id
  console.log('üëâ addFood request body:', req.body);
  console.log('üëâ addFood request file:', req.file);
  console.log('üëâ user from token:', req.user);

  const userId = req.user?.user_id;
  const { food_name, price, options } = req.body;

  try {
    const marketResult = await pool.query(
      'SELECT market_id FROM markets WHERE owner_id = $1',
      [userId]
    );

    if (marketResult.rows.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', userId);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }

    const marketId = marketResult.rows[0].market_id;

    const image = req.file?.path;

    console.log('marketId:', marketId, 'image:', image);

    const result = await pool.query(
      `INSERT INTO foods (market_id, food_name, price, image_url, options)
       VALUES ($1, $2, $3, $4, $5) RETURNING *`,
      [marketId, food_name, price, image, options]
    );

    console.log('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result.rows[0]);

    res.status(200).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', food: result.rows[0] });
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π' });
  }
};

exports.getMyFoods = async (req, res) => {
  const userId = req.user?.user_id;

  try {
    const marketResult = await pool.query(
      'SELECT market_id FROM markets WHERE owner_id = $1',
      [userId]
    );

    if (marketResult.rows.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }

    const marketId = marketResult.rows[0].market_id;

    const foodsResult = await pool.query(
      'SELECT * FROM foods WHERE market_id = $1',
      [marketId]
    );

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö options ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô null ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô '[]'
    const foods = foodsResult.rows.map((food) => {
      return {
        ...food,
        options: JSON.stringify(food.options ?? []), // ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏™‡∏°‡∏≠
      };
    });

    // ‚úÖ log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤ options ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
    // console.log('üì¶ ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤:', foods);
    console.log('üì¶ ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤:', JSON.stringify(foods, null, 2));

    res.status(200).json({ foods });
  } catch (err) {
    console.error('‚ùå ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π' });
  }
};

exports.addFood = async (req, res) => {
  const userId = req.user?.user_id;
  const { food_name, price, options } = req.body;

  try {
    const marketResult = await pool.query(
      'SELECT market_id FROM markets WHERE owner_id = $1',
      [userId]
    );

    if (marketResult.rows.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }

    const marketId = marketResult.rows[0].market_id;
    const image = req.file?.path;

    // options ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô JSON string (frontend ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á)
    const optionsJson = options ? JSON.stringify(JSON.parse(options)) : null;

    const result = await pool.query(
      `INSERT INTO foods (market_id, food_name, price, image_url, options)
       VALUES ($1, $2, $3, $4, $5) RETURNING *`,
      [marketId, food_name, price, image, optionsJson]
    );

    res.status(200).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', food: result.rows[0] });
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π' });
  }
};

exports.updateFood = async (req, res) => {
  const userId = req.user?.user_id;
  const foodId = req.params.id;
  const { food_name, price, options } = req.body;
  const image = req.file?.path;

  console.log('üü¢ updateFood called');
  console.log('User ID:', userId);
  console.log('Food ID:', foodId);
  console.log('Request body:', req.body);
  console.log('Image path:', image);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á user
    const marketResult = await pool.query(
      'SELECT market_id FROM markets WHERE owner_id = $1',
      [userId]
    );
    console.log('Market check result:', marketResult.rows);

    if (marketResult.rows.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' });
    }

    const marketId = marketResult.rows[0].market_id;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const foodCheck = await pool.query(
      'SELECT * FROM foods WHERE food_id = $1 AND market_id = $2',
      [foodId, marketId]
    );
    console.log('Food ownership check:', foodCheck.rows);

    if (foodCheck.rows.length === 0) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ' });
    }

    // ‡πÅ‡∏õ‡∏•‡∏á options
    const optionsJson = options ? JSON.stringify(JSON.parse(options)) : null;
    console.log('Parsed options JSON:', optionsJson);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query dynamic ‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏´‡∏° ‡πÅ‡∏•‡∏∞ options
    let updateQuery = 'UPDATE foods SET food_name = $1, price = $2';
    const params = [food_name, price];
    let paramIndex = 3;

    if (image) {
      updateQuery += `, image_url = $${paramIndex}`;
      params.push(image);
      paramIndex++;
    }
    if (optionsJson) {
      updateQuery += `, options = $${paramIndex}`;
      params.push(optionsJson);
      paramIndex++;
    }

    updateQuery += ` WHERE food_id = $${paramIndex} RETURNING *`;
    params.push(foodId);

    console.log('Update Query:', updateQuery);
    console.log('Query Params:', params);

    const result = await pool.query(updateQuery, params);
    console.log('Update result:', result.rows[0]);

    res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', food: result.rows[0] });
  } catch (err) {
    console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π' });
  }
};

exports.updateManualOverride = async (req, res) => {
  const userId = req.user?.user_id; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ middleware authenticateJWT ‡∏Å‡∏≥‡∏´‡∏ô‡∏î req.user
  const marketId = req.params.id;
  const { is_manual_override, is_open } = req.body;

  if (typeof is_manual_override !== 'boolean') {
    return res.status(400).json({ message: 'is_manual_override ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Boolean' });
  }
  if (typeof is_open !== 'boolean') {
    return res.status(400).json({ message: 'is_open ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Boolean' });
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
    const marketCheck = await pool.query(
      'SELECT * FROM markets WHERE market_id = $1 AND owner_id = $2',
      [marketId, userId]
    );

    if (marketCheck.rows.length === 0) {
      return res.status(403).json({ message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ is_manual_override ‡πÅ‡∏•‡∏∞ is_open
    await pool.query(
      `UPDATE markets SET is_manual_override = $1, is_open = $2 WHERE market_id = $3`,
      [is_manual_override, is_open, marketId]
    );

    res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï manual override ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', is_manual_override, is_open });
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô updateManualOverride:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};

exports.updateMarketStatus = async (req, res) => {
  const userId = req.user?.user_id;
  const marketId = req.params.id;
  const { is_open, override_minutes } = req.body;

  if (typeof is_open !== 'boolean') {
    return res.status(400).json({ message: 'is_open ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Boolean (true/false)' });
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
    const marketCheck = await pool.query(
      'SELECT * FROM markets WHERE market_id = $1 AND owner_id = $2',
      [marketId, userId]
    );

    if (marketCheck.rows.length === 0) {
      return res.status(403).json({ message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });
    }

    const currentMarket = marketCheck.rows[0];

    let override_until = currentMarket.override_until;
    let is_manual_override = currentMarket.is_manual_override;

    if (override_minutes && typeof override_minutes === 'number' && override_minutes > 0) {
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ override ‡πÉ‡∏´‡∏°‡πà
      override_until = new Date(Date.now() + override_minutes * 60 * 1000);
      is_manual_override = true;
    }

    // ‡∏ñ‡πâ‡∏≤ override_minutes ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ <=0 ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô override status ‡πÅ‡∏•‡∏∞ override_until

    await pool.query(
      `UPDATE markets 
       SET is_open = $1, 
           is_manual_override = $2, 
           override_until = $3 
       WHERE market_id = $4`,
      [is_open, is_manual_override, override_until, marketId]
    );

    res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', is_open, is_manual_override, override_until });
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};
