const pool = require('../../config/db');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { OAuth2Client } = require('google-auth-library');
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
exports.loginRider = async (req, res) => {
    try {
        const { email, password } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!email || !password) {
            return res.status(400).json({ 
                error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' 
            });
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const userResult = await pool.query(
            'SELECT user_id, email, password, display_name, role, is_verified FROM users WHERE email = $1 AND role = $2',
            [email, 'rider']
        );

        if (userResult.rows.length === 0) {
            return res.status(401).json({ 
                error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
            });
        }

        const user = userResult.rows[0];

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(401).json({ 
                error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
            });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
        const riderProfileResult = await pool.query(
            'SELECT approval_status, created_at as submitted_at FROM rider_profiles WHERE user_id = $1',
            [user.user_id]
        );

        let riderStatus = {
            has_submitted: false,
            approval_status: null,
            submitted_at: null
        };

        if (riderProfileResult.rows.length > 0) {
            const profile = riderProfileResult.rows[0];
            riderStatus = {
                has_submitted: true,
                approval_status: profile.approval_status,
                submitted_at: profile.submitted_at
            };
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
        const token = jwt.sign(
            { 
                user_id: user.user_id,
                email: user.email,
                role: user.role
            },
            process.env.JWT_SECRET,
            { expiresIn: '7d' } // token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô
        );

        // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        res.json({
            message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            token: token,
            user: {
                user_id: user.user_id,
                email: user.email,
                display_name: user.display_name,
                role: user.role,
                is_verified: user.is_verified
            },
            rider_status: riderStatus
        });

    } catch (error) {
        console.error('Rider login error:', error);
        res.status(500).json({ 
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' 
        });
    }
};

// Login ‡πÇ‡∏î‡∏¢ Google
exports.loginRiderWithGoogle = async (req, res) => {
    const { tokenId } = req.body;
    console.log('üì• Google login attempt with tokenId:', tokenId.substring(0, 20) + '...'); // ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏Å‡∏±‡∏ö Google
        const ticket = await client.verifyIdToken({
            idToken: tokenId,
            audience: process.env.GOOGLE_CLIENT_ID
        });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á token
        const payload = ticket.getPayload();
        console.log('‚úÖ Google payload:', payload);
        const { sub: google_id, name: display_name, email, picture: photo_url } = payload;

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        let userRiderResult = await pool.query(
            'SELECT user_id, email, display_name, role, is_verified, google_id FROM users WHERE email = $1 AND role = $2',
            [email, 'rider']
        );

        let user;
        
        if (userRiderResult.rows.length === 0) {
            // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            console.log('üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Google:', email);
            const insertResult = await pool.query(
                `INSERT INTO users (google_id, display_name, email, photo_url, role, is_verified, providers)
                 VALUES ($1, $2, $3, $4, 'rider', false, 'google')
                 RETURNING user_id, email, display_name, role, is_verified, google_id`,
                [google_id, display_name, email, photo_url]
            );
            user = insertResult.rows[0];
        } else {
            // ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï google_id ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            user = userRiderResult.rows[0];
            
            if (!user.google_id) {
                await pool.query(
                    'UPDATE users SET google_id = $1, photo_url = $2, providers = $3 WHERE user_id = $4',
                    [google_id, photo_url, 'google', user.user_id]
                );
            }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
        const riderProfileResult = await pool.query(
            'SELECT approval_status, created_at as submitted_at FROM rider_profiles WHERE user_id = $1',
            [user.user_id]
        );

        let riderStatus = {
            has_submitted: false,
            approval_status: null,
            submitted_at: null
        };

        if (riderProfileResult.rows.length > 0) {
            const profile = riderProfileResult.rows[0];
            riderStatus = {
                has_submitted: true,
                approval_status: profile.approval_status,
                submitted_at: profile.submitted_at
            };
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
        const token = jwt.sign(
            { 
                user_id: user.user_id,
                email: user.email,
                role: user.role
            },
            process.env.JWT_SECRET,
            { expiresIn: '7d' }
        );

        console.log('‚úÖ ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà login ‡∏ú‡πà‡∏≤‡∏ô Google:', user);

        // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        res.json({
            message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            token: token,
            user: {
                user_id: user.user_id,
                email: user.email,
                display_name: user.display_name,
                role: user.role,
                is_verified: user.is_verified
            },
            rider_status: riderStatus
        });

    } catch (error) {
        console.error('‚ùå Rider Google login error:', error);
        if (error.message.includes('audience')) {
            return res.status(401).json({ 
                error: 'Google token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - audience mismatch' 
            });
        }
        res.status(401).json({ 
            error: 'Google token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ email ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' 
        });
    }
};

// ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token
exports.refreshToken = async (req, res) => {
    try {
        const { refresh_token } = req.body;

        if (!refresh_token) {
            return res.status(400).json({ 
                error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á refresh token' 
            });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö refresh token
        const decoded = jwt.verify(refresh_token, process.env.JWT_REFRESH_SECRET);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        const userResult = await pool.query(
            'SELECT user_id, email, role FROM users WHERE user_id = $1 AND role = $2',
            [decoded.user_id, 'rider']
        );

        if (userResult.rows.length === 0) {
            return res.status(401).json({ 
                error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' 
            });
        }

        const user = userResult.rows[0];

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á access token ‡πÉ‡∏´‡∏°‡πà
        const newToken = jwt.sign(
            { 
                user_id: user.user_id,
                email: user.email,
                role: user.role
            },
            process.env.JWT_SECRET,
            { expiresIn: '7d' }
        );

        res.json({
            message: '‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            token: newToken
        });

    } catch (error) {
        if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {
            return res.status(401).json({ 
                error: 'Refresh token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' 
            });
        }

        console.error('Refresh token error:', error);
        res.status(500).json({ 
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token' 
        });
    }
};

// ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
exports.getProfile = async (req, res) => {
    try {
        const userId = req.user.user_id;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
        const result = await pool.query(`
            SELECT 
                u.user_id,
                u.display_name,
                u.email,
                u.phone,
                rp.promptpay,
                u.birthdate,
                u.gender,
                u.photo_url,
                u.created_at,
                u.is_verified,
                rp.approval_status,
                rp.vehicle_type,
                rp.vehicle_brand_model,
                rp.vehicle_color,
                rp.vehicle_registration_number,
                rp.vehicle_registration_province,
                rp.created_at as submitted_at,
                rp.approved_at,
                rp.rejection_reason,
                ra.house_number,
                ra.street,
                ra.subdistrict,
                ra.district,
                ra.province,
                ra.postal_code
            FROM users u
            LEFT JOIN rider_profiles rp ON u.user_id = rp.user_id
            LEFT JOIN rider_addresses ra ON u.user_id = ra.user_id AND ra.is_default = true
            WHERE u.user_id = $1
        `, [userId]);

        if (result.rows.length === 0) {
            return res.status(404).json({ 
                error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' 
            });
        }

        const profile = result.rows[0];

        res.json({
            user_info: {
                user_id: profile.user_id,
                display_name: profile.display_name,
                email: profile.email,
                phone: profile.phone,
                promptpay: profile.promptpay,
                birthdate: profile.birthdate,
                gender: profile.gender,
                photo_url: profile.photo_url,
                created_at: profile.created_at,
                is_verified: profile.is_verified
            },
            rider_status: {
                has_submitted: !!profile.approval_status,
                approval_status: profile.approval_status,
                submitted_at: profile.submitted_at,
                approved_at: profile.approved_at,
                rejection_reason: profile.rejection_reason
            },
            vehicle_info: profile.approval_status ? {
                vehicle_type: profile.vehicle_type,
                vehicle_brand_model: profile.vehicle_brand_model,
                vehicle_color: profile.vehicle_color,
                vehicle_registration_number: profile.vehicle_registration_number,
                vehicle_registration_province: profile.vehicle_registration_province
            } : null,
            address: profile.house_number ? {
                house_number: profile.house_number,
                street: profile.street,
                subdistrict: profile.subdistrict,
                district: profile.district,
                province: profile.province,
                postal_code: profile.postal_code
            } : null
        });

    } catch (error) {
        console.error('Get rider profile error:', error);
        res.status(500).json({ 
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' 
        });
    }
};
