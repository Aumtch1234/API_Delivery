const jwt = require('jsonwebtoken');
const pool = require('../../config/db');

exports.getProfile = async (req, res) => {
  const { user_id } = req.user;
  const userResult = await pool.query('SELECT * FROM users WHERE user_id = $1', [user_id]);
  res.json(userResult.rows[0]);
};

exports.getOrderHistory = async (req, res) => {
  try {
    const user_id = req.user?.user_id;
    if (!user_id) {
      return res.status(400).json({
        success: false,
        message: "Unauthorized: user_id missing from token",
      });
    }

    const result = await pool.query(
      `
      SELECT 
        o.order_id,
        o.market_id,
        m.shop_name,
        SUM(oi.subtotal) AS subtotal,      -- ‚úÖ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î subtotal ‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        o.delivery_fee,
        o.status,
        o.created_at,
        o.updated_at,
        json_agg(
          json_build_object(
            'food_name', oi.food_name,
            'quantity', oi.quantity,
            'sell_price', oi.sell_price,
            'subtotal', oi.subtotal,
            'selected_options', oi.selected_options
          )
        ) AS items                         -- ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (array)
      FROM orders o
      JOIN markets m ON o.market_id = m.market_id
      JOIN order_items oi ON o.order_id = oi.order_id
      WHERE o.user_id = $1
      AND o.status IN ('completed', 'cancelled')
      GROUP BY 
        o.order_id, m.shop_name, o.delivery_fee, o.status, o.created_at, o.updated_at
      ORDER BY o.updated_at DESC;
      `,
      [user_id]
    );

    res.status(200).json({
      success: true,
      count: result.rows.length,
      data: result.rows,
    });
  } catch (err) {
    console.error("‚ùå Error fetching order history:", err);
    res.status(500).json({
      success: false,
      message: "Internal server error",
    });
  }
};



exports.updateProfile = async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
    const token = req.headers.authorization?.split(' ')[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.user_id;

    // req.body ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å parse ‡∏à‡∏≤‡∏Å multer
    const {
      display_name,
      phone,
      gender,
      birthdate,
      email,
      photoUrl, // ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
    } = req.body;

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:
    // - ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà (multer + cloudinary) => ‡πÉ‡∏ä‡πâ req.file.path (URL ‡∏à‡∏≤‡∏Å CloudinaryStorage)
    // - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á photoUrl ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤ => ‡πÉ‡∏ä‡πâ photoUrl
    // - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á => ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô DB (‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß fallback)
    let imageUrl = photoUrl || null;

    if (req.file?.path) {
      imageUrl = req.file.path; // Cloudinary final URL
    }

    const userRes = await pool.query(
      'SELECT email, is_verified FROM users WHERE user_id = $1',
      [userId]
    );

    if (userRes.rowCount === 0) {
      return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }

    const user = userRes.rows[0];

    const finalEmail = user.is_verified ? user.email : email;

    // ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏ñ‡πâ‡∏≤ imageUrl ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á -> ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô null ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
    if (!imageUrl) {
      const currentPhoto = await pool.query('SELECT photo_url FROM users WHERE user_id = $1', [userId]);
      imageUrl = currentPhoto.rows[0]?.photo_url || null;
    }

    await pool.query(
      `UPDATE users 
       SET display_name = $1, phone = $2, gender = $3, birthdate = $4, 
           email = $5, photo_url = $6 
       WHERE user_id = $7`,
      [
        display_name || null,
        phone || null,
        gender !== undefined ? parseInt(gender, 10) : null,
        birthdate || null,
        finalEmail,
        imageUrl,
        userId,
      ]
    );

    res.json({ success: true, message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', photo_url: imageUrl });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};
// ‚úÖ addAddress Controller
exports.addAddress = async (req, res) => {
  try {
    const user_id = req.user.user_id; // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token

    const {
      name,
      phone,
      address,
      district,
      city,
      postalCode,
      notes,
      latitude,
      longitude,
      locationText
    } = req.body;

    const result = await pool.query(
      `INSERT INTO client_addresses
       (user_id, name, phone, address, district, city, postal_code, notes, latitude, longitude, location_text)
       VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
       RETURNING id`,
      [user_id, name, phone, address, district, city, postalCode, notes, latitude, longitude, locationText]
    );

    res.json({
      success: true,
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      id: result.rows[0].id
    });
  } catch (err) {
    console.error('‚ùå Add Address Error:', err);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};

// ‚úÖ getAddresses Controller
exports.getAddresses = async (req, res) => {
  try {
    const user_id = req.user.user_id; // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token

    const result = await pool.query(
      `SELECT id, name, phone, address, district, city, postal_code, notes, latitude, longitude, location_text, set_address
       FROM client_addresses
       WHERE user_id = $1
       ORDER BY set_address DESC, id DESC`, // set_address = true ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
      [user_id]
    );

    res.json({
      success: true,
      addresses: result.rows
    });
  } catch (err) {
    console.error('‚ùå Get Addresses Error:', err);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};

// üì• ‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å (set_address = true) ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
exports.GetDefaultAddress = async (req, res) => {
  try {
    const user_id = req.user.user_id;

    const result = await pool.query(
      `SELECT *
       FROM client_addresses
       WHERE user_id = $1 AND set_address = true
       LIMIT 1`,
      [user_id]
    );

    if (result.rows.length === 0) {
      return res.json({
        success: true,
        data: [],      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å
        message: '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
      });
    }

    res.json({
      success: true,
      data: result.rows,
    });
  } catch (err) {
    console.error('‚ùå GetDefaultAddress error:', err);
    res.status(500).json({ success: false, error: 'Server error' });
  }
};

// ‚úÖ updateAddress Controller
exports.updateAddress = async (req, res) => {
  try {
    const user_id = req.user.user_id; // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
    const { id } = req.params; // id ‡∏Ç‡∏≠‡∏á address ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

    const {
      name,
      phone,
      address,
      district,
      city,
      postalCode,
      notes,
      latitude,
      longitude,
      locationText
    } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const check = await pool.query(
      'SELECT * FROM client_addresses WHERE id = $1 AND user_id = $2',
      [id, user_id]
    );

    if (check.rowCount === 0) {
      return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    await pool.query(
      `UPDATE client_addresses
       SET name = $1, phone = $2, address = $3, district = $4, city = $5,
           postal_code = $6, notes = $7, latitude = $8, longitude = $9, location_text = $10
       WHERE id = $11 AND user_id = $12`,
      [name, phone, address, district, city, postalCode, notes, latitude, longitude, locationText, id, user_id]
    );

    res.json({ success: true, message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });
  } catch (err) {
    console.error('‚ùå Update Address Error:', err);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};

// DELETE /delete/address/:id
exports.deleteAddress = async (req, res) => {
  try {
    const user_id = req.user.user_id; // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
    const { id } = req.params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const check = await pool.query(
      'SELECT * FROM client_addresses WHERE id = $1 AND user_id = $2',
      [id, user_id]
    );

    if (check.rowCount === 0) {
      return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö' });
    }

    // ‡∏•‡∏ö address
    await pool.query(
      'DELETE FROM client_addresses WHERE id = $1 AND user_id = $2',
      [id, user_id]
    );

    res.json({ success: true, message: '‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });
  } catch (err) {
    console.error('‚ùå Delete Address Error:', err);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};

// ‚úÖ setMainAddress Controller
exports.setMainAddress = async (req, res) => {
  try {
    const user_id = req.user.user_id; // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å middleware
    const { id } = req.params; // id ‡∏Ç‡∏≠‡∏á address ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
    const check = await pool.query(
      'SELECT * FROM client_addresses WHERE id = $1 AND user_id = $2',
      [id, user_id]
    );

    if (check.rowCount === 0) {
      return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤' });
    }

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï set_address = false ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user
    await pool.query(
      'UPDATE client_addresses SET set_address = false WHERE user_id = $1',
      [user_id]
    );

    // ‡∏ï‡∏±‡πâ‡∏á address ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô true
    await pool.query(
      'UPDATE client_addresses SET set_address = true WHERE id = $1 AND user_id = $2',
      [id, user_id]
    );

    res.json({ success: true, message: '‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });
  } catch (err) {
    console.error('‚ùå Set Main Address Error:', err);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};
