const pool = require('../../config/db');

exports.marketsController = async (req, res) => {
  const owner_id = req.user?.user_id;
  const { shop_name, shop_description, open_time, close_time, address, phone, latitude, longitude } = req.body;
  const shop_logo_url = req.file?.path;

  if (!owner_id) {
    return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö owner_id ‡∏à‡∏≤‡∏Å token' });
  }

  if (!shop_name || !shop_description || !shop_logo_url || !open_time || !close_time || !address || !phone) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }

  try {
    await pool.query(
      `UPDATE users SET is_seller = true WHERE user_id = $1`,
      [owner_id]
    );

    console.log('üì• Received from frontend:', {
      owner_id,
      shop_name,
      shop_description,
      shop_logo_url,
      open_time,
      close_time,
      address,
      phone,
      latitude,
      longitude
    });

    const result = await pool.query(
      `INSERT INTO markets (owner_id, shop_name, shop_description, shop_logo_url, open_time, close_time, address, phone, latitude, longitude)
   VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
   RETURNING *`,
      [owner_id, shop_name, shop_description, shop_logo_url, open_time, close_time, address, phone, latitude, longitude]
    );


    res.status(200).json({
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      market: result.rows[0],
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: error.message });
  }
};

exports.updateMarketController = async (req, res) => {
  const { id } = req.params;
  const {
    shop_name,
    shop_description,
    open_time,
    close_time,
    address,
    phone,
    latitude,
    longitude
  } = req.body;

  const shop_logo_url = req.file?.path;

  if (!shop_name || !shop_description || !open_time || !close_time) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }

  try {
    const result = await pool.query(
      `UPDATE markets
       SET shop_name = $1,
           shop_description = $2,
           open_time = $3,
           close_time = $4,
           address = $5,
           phone = $6,
           latitude = $7,
           longitude = $8,
           shop_logo_url = COALESCE($9, shop_logo_url) -- ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤
       WHERE market_id = $10
       RETURNING *`,
      [
        shop_name,
        shop_description,
        open_time,
        close_time,
        address,
        phone,
        latitude,
        longitude,
        shop_logo_url, // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        id
      ]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });
    }

    res.status(200).json({
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      market: result.rows[0],
    });

  } catch (error) {
    console.error('‚ùå Error updating market:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: error.message });
  }
};


exports.getMyMarket = async (req, res) => {
  const userId = req.user?.user_id;
  try {
    const result = await pool.query('SELECT * FROM markets WHERE owner_id = $1', [userId]);
    if (result.rows.length === 0)
      return res.status(404).json({ message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤' });

    res.status(200).json({ message: '‡∏î‡∏π‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', market: result.rows[0] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
};

exports.addFood = async (req, res) => {
  const userId = req.user?.user_id;
  // const { food_name, price, options } = req.body;
  let { food_name, price, options } = req.body;

  try {
    // ‡∏´‡∏≤ market ‡∏Ç‡∏≠‡∏á user
    const marketResult = await pool.query(
      'SELECT market_id, owner_id FROM markets WHERE owner_id = $1',
      [userId]
    );

    if (marketResult.rows.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }

    const market = marketResult.rows[0];
    const marketId = market.market_id;
    const image = req.file?.path;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ normalize options
    if (!options) {
      options = [];
    } else if (typeof options === 'string') {
      try {
        options = JSON.parse(options);
      } catch (err) {
        console.warn("‚ö†Ô∏è options JSON.parse failed:", err);
        options = [];
      }
    }
    if (!Array.isArray(options)) {
      options = [];
    }
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢
    const sellPrice = market.owner_id
      ? Math.ceil(price * 1.15) // +15% ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      : Math.ceil(price * 1.20); // +20% ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ options +15% ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ +20% ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const sellOptions = options.map(option => {
      const optPriceNum = Number(option.extraPrice || option.price) || 0;
      const optionPrice = market.owner_id
        ? Math.ceil(optPriceNum * 1.15)
        : Math.ceil(optPriceNum * 1.20);
      return { ...option, extraPrice: optionPrice };
    });

    const result = await pool.query(
      `INSERT INTO foods (market_id, food_name, price, sell_price, image_url, options, sell_options)
       VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`,
      [marketId, food_name, price, sellPrice, image, JSON.stringify(options), JSON.stringify(sellOptions)]
    );

    res.status(200).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', food: result.rows[0] });
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π' });
  }
};


exports.getMyFoods = async (req, res) => {
  const userId = req.user?.user_id;

  try {
    const marketResult = await pool.query(
      'SELECT market_id FROM markets WHERE owner_id = $1',
      [userId]
    );

    if (marketResult.rows.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }

    const marketId = marketResult.rows[0].market_id;

    // ‚úÖ JOIN ‡∏Å‡∏±‡∏ö categorys table ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á category_name
    const foodsResult = await pool.query(
      `SELECT 
        f.food_id,
        f.market_id,
        f.food_name,
        f.price,
        f.sell_price,
        f.image_url,
        f.options,
        f.sell_options,
        f.rating,
        f.created_at,
        f.created_by_admin_id,
        f.category_id,
        c.name as category_name,
        c.cate_image_url
       FROM foods f
       LEFT JOIN categorys c ON f.category_id = c.id
       WHERE f.market_id = $1
       ORDER BY f.created_at DESC`,
      [marketId]
    );

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö options ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô null ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô '[]'
    const foods = foodsResult.rows.map((food) => {
      return {
        ...food,
        options: food.options ? JSON.stringify(food.options) : '[]',
        sell_options: food.sell_options ? food.sell_options : [],
      };
    });

    console.log('üì¶ ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ (with category):', JSON.stringify(foods, null, 2));

    res.status(200).json({ foods });
  } catch (err) {
    console.error('‚ùå ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π' });
  }
};

exports.addFood = async (req, res) => {
  const userId = req.user?.user_id;
  let { food_name, price, options, category_id } = req.body; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° category_id

  try {
    // ‡∏´‡∏≤ market ‡∏Ç‡∏≠‡∏á user
    const marketResult = await pool.query(
      'SELECT market_id, owner_id FROM markets WHERE owner_id = $1',
      [userId]
    );

    if (marketResult.rows.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }

    const market = marketResult.rows[0];
    const marketId = market.market_id;
    const image = req.file?.path;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ normalize options
    if (!options) {
      options = [];
    } else if (typeof options === 'string') {
      try {
        options = JSON.parse(options);
      } catch (err) {
        console.warn("‚ö†Ô∏è options JSON.parse failed:", err);
        options = [];
      }
    }
    if (!Array.isArray(options)) {
      options = [];
    }

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢
    const sellPrice = market.owner_id
      ? Math.ceil(price * 1.15) // +15% ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      : Math.ceil(price * 1.20); // +20% ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ options +15% ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ +20% ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const sellOptions = options.map(option => {
      const optPriceNum = Number(option.extraPrice || option.price) || 0;
      const optionPrice = market.owner_id
        ? Math.ceil(optPriceNum * 1.15)
        : Math.ceil(optPriceNum * 1.20);
      return { ...option, extraPrice: optionPrice };
    });

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° category_id ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ INSERT
    const result = await pool.query(
      `INSERT INTO foods (market_id, food_name, price, sell_price, image_url, options, sell_options, category_id)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`,
      [marketId, food_name, price, sellPrice, image, JSON.stringify(options), JSON.stringify(sellOptions), category_id]
    );

    res.status(200).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', food: result.rows[0] });
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π' });
  }
};

exports.updateFood = async (req, res) => {
  const userId = req.user?.user_id;
  const foodId = req.params.id;
  let { food_name, price, options, category_id } = req.body; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° category_id
  const image = req.file?.path;

  console.log('üü¢ updateFood called');
  console.log('User ID:', userId);
  console.log('Food ID:', foodId);
  console.log('Request body:', req.body);
  console.log('Category ID:', category_id); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° log
  console.log('Image path:', image);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á user
    const marketResult = await pool.query(
      'SELECT market_id, owner_id FROM markets WHERE owner_id = $1',
      [userId]
    );
    console.log('Market check result:', marketResult.rows);

    if (marketResult.rows.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' });
    }

    const market = marketResult.rows[0];
    const marketId = market.market_id;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const foodCheck = await pool.query(
      'SELECT * FROM foods WHERE food_id = $1 AND market_id = $2',
      [foodId, marketId]
    );
    console.log('Food ownership check:', foodCheck.rows);

    if (foodCheck.rows.length === 0) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ' });
    }

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì sell_price ‡πÉ‡∏´‡∏°‡πà
    const sellPrice = market.owner_id
      ? Math.ceil(price * 1.15) // +15% ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      : Math.ceil(price * 1.20); // +20% ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    console.log('Calculated sell_price:', sellPrice);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á options
    let parsedOptions = [];
    let sellOptions = [];
    if (options) {
      if (typeof options === 'string') {
        try {
          parsedOptions = JSON.parse(options);
        } catch (err) {
          console.warn("‚ö†Ô∏è options JSON.parse failed:", err);
          parsedOptions = [];
        }
      } else if (Array.isArray(options)) {
        parsedOptions = options;
      }
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì sell_options ‡πÉ‡∏´‡∏°‡πà
      sellOptions = parsedOptions.map(option => {
        const optPriceNum = Number(option.extraPrice || option.price) || 0;
        const optionPrice = market.owner_id
          ? Math.ceil(optPriceNum * 1.15)
          : Math.ceil(optPriceNum * 1.20);
        return { ...option, extraPrice: optionPrice };
      });
    }
    console.log('Parsed options:', parsedOptions);
    console.log('Calculated sell_options:', sellOptions);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á query dynamic
    let updateQuery = 'UPDATE foods SET food_name = $1, price = $2, sell_price = $3';
    const params = [food_name, price, sellPrice];
    let paramIndex = 4;

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° category_id ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≤
    if (category_id !== undefined && category_id !== null) {
      updateQuery += `, category_id = $${paramIndex}`;
      params.push(category_id);
      paramIndex++;
    }

    if (image) {
      updateQuery += `, image_url = $${paramIndex}`;
      params.push(image);
      paramIndex++;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° options ‡πÅ‡∏•‡∏∞ sell_options ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (options) {
      updateQuery += `, options = $${paramIndex}`;
      params.push(JSON.stringify(parsedOptions));
      paramIndex++;

      updateQuery += `, sell_options = $${paramIndex}`;
      params.push(JSON.stringify(sellOptions));
      paramIndex++;
    }

    updateQuery += ` WHERE food_id = $${paramIndex} RETURNING *`;
    params.push(foodId);

    console.log('Update Query:', updateQuery);
    console.log('Query Params:', params);

    const result = await pool.query(updateQuery, params);
    console.log('Update result:', result.rows[0]);

    res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', food: result.rows[0] });
  } catch (err) {
    console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π' });
  }
};

exports.updateManualOverride = async (req, res) => {
  const userId = req.user?.user_id; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ middleware authenticateJWT ‡∏Å‡∏≥‡∏´‡∏ô‡∏î req.user
  const marketId = req.params.id;
  const { is_manual_override, is_open } = req.body;

  if (typeof is_manual_override !== 'boolean') {
    return res.status(400).json({ message: 'is_manual_override ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Boolean' });
  }
  if (typeof is_open !== 'boolean') {
    return res.status(400).json({ message: 'is_open ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Boolean' });
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
    const marketCheck = await pool.query(
      'SELECT * FROM markets WHERE market_id = $1 AND owner_id = $2',
      [marketId, userId]
    );

    if (marketCheck.rows.length === 0) {
      return res.status(403).json({ message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ is_manual_override ‡πÅ‡∏•‡∏∞ is_open
    await pool.query(
      `UPDATE markets SET is_manual_override = $1, is_open = $2 WHERE market_id = $3`,
      [is_manual_override, is_open, marketId]
    );

    res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï manual override ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', is_manual_override, is_open });
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô updateManualOverride:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};

exports.updateMarketStatus = async (req, res) => {
  const userId = req.user?.user_id;
  const marketId = req.params.id;
  const { is_open, override_minutes } = req.body;

  if (typeof is_open !== 'boolean') {
    return res.status(400).json({ message: 'is_open ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Boolean (true/false)' });
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
    const marketCheck = await pool.query(
      'SELECT * FROM markets WHERE market_id = $1 AND owner_id = $2',
      [marketId, userId]
    );

    if (marketCheck.rows.length === 0) {
      return res.status(403).json({ message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });
    }

    const currentMarket = marketCheck.rows[0];

    let override_until = currentMarket.override_until;
    let is_manual_override = currentMarket.is_manual_override;

    if (override_minutes && typeof override_minutes === 'number' && override_minutes > 0) {
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ override ‡πÉ‡∏´‡∏°‡πà
      override_until = new Date(Date.now() + override_minutes * 60 * 1000);
      is_manual_override = true;
    }

    // ‡∏ñ‡πâ‡∏≤ override_minutes ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ <=0 ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô override status ‡πÅ‡∏•‡∏∞ override_until

    await pool.query(
      `UPDATE markets 
       SET is_open = $1, 
           is_manual_override = $2, 
           override_until = $3 
       WHERE market_id = $4`,
      [is_open, is_manual_override, override_until, marketId]
    );

    res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', is_open, is_manual_override, override_until });
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};

exports.deleteFood = async (req, res) => {
  const { food_id } = req.params;
  const user_id = req.user.user_id; // ‡∏à‡∏≤‡∏Å JWT

  try {
    // ‡∏´‡∏≤ market_id ‡∏Ç‡∏≠‡∏á user ‡∏Å‡πà‡∏≠‡∏ô
    const marketResult = await pool.query(
      "SELECT market_id FROM markets WHERE owner_id = $1",
      [user_id]
    );

    if (marketResult.rows.length === 0) {
      return res.status(404).json({ message: "Market not found for this user" });
    }

    const market_id = marketResult.rows[0].market_id;

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô market_id ‡∏Ç‡∏≠‡∏á user ‡πÑ‡∏´‡∏°
    const foodResult = await pool.query(
      "SELECT * FROM foods WHERE food_id = $1 AND market_id = $2",
      [food_id, market_id]
    );

    if (foodResult.rows.length === 0) {
      return res.status(403).json({ message: "You do not have permission to delete this food" });
    }

    // ‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    await pool.query("DELETE FROM foods WHERE food_id = $1", [food_id]);

    res.json({ message: "Food deleted successfully" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
};