// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô Socket.IO ‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á npm i socket.io-client ‡∏Å‡πà‡∏≠‡∏ô
// ‡∏£‡∏±‡∏ô‡πÉ‡∏ô terminal ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (node send.js userId roomId "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á") ‡πÄ‡∏ä‡πà‡∏ô node send.js 31 1 "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"

// ‡πÉ‡∏ä‡πâ: node send.js <userId> <roomId> "<message>"
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: node send.js 31 1 "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"

const { io } = require('socket.io-client');

// --------- CLI args ----------
const userId = parseInt(process.argv[2], 10);
const roomId = parseInt(process.argv[3], 10);
const text   = process.argv[4];

if (!userId || !roomId || typeof text !== 'string') {
  console.error('‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: node send.js <userId:int> <roomId:int> "<message:string>"');
  process.exit(1);
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô BASE ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á/‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏∑‡πà‡∏ô
const BASE = 'http://127.0.0.1:4000/chat';

// --------- Connect ----------
const socket = io(BASE, {
  // ‡πÄ‡∏õ‡∏¥‡∏î fallback ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ websocket ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  transports: ['websocket', 'polling'],
  query: { userId },        // ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö middleware ‡πÉ‡∏ô SocketChats.js
  timeout: 8000,            // ‡∏Å‡∏±‡∏ô timeout ‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô
  reconnection: false,      // ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reconnect
});

// safety timer ‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
const GLOBAL_TIMEOUT_MS = 15000;
const globalTimer = setTimeout(() => {
  console.error('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î');
  try { socket.close(); } catch {}
  process.exit(1);
}, GLOBAL_TIMEOUT_MS);

socket.on('connect', () => {
  console.log(`‚úÖ connected as userId=${userId}, socket.id=${socket.id}`);
  // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° DB)
  socket.emit('join', { roomId });
});

let joined = false;

socket.on('joined', ({ roomId: joinedRoom }) => {
  joined = true;
  console.log(`üè∑Ô∏è joined room ${joinedRoom}`);

  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á ‡πÜ
  setTimeout(() => {
    const payload = { roomId, text, type: 'text' };
    console.log('üì® sending:', payload);
    socket.emit('message:send', payload);
  }, 200);
});

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠ server ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
socket.on('message:new', (msg) => {
  console.log('üÜï message:new =>', msg);
  cleanupAndExit(0);
});

// error ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
socket.on('connect_error', (err) => {
  console.error('‚ùå connect_error:', err?.message || err);
  // ‡∏Æ‡∏¥‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  console.error('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ server ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà, ‡∏û‡∏≠‡∏£‡πå‡∏ï/host ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, namespace /chat ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô, ‡πÅ‡∏•‡∏∞ userId ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô DB');
  cleanupAndExit(1);
});

socket.on('error', (err) => {
  console.error('‚ùå error:', err);
});

socket.on('disconnect', (reason) => {
  console.log('‚ÑπÔ∏è disconnected:', reason);
  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞‡πÇ‡∏î‡∏ô global timeout ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏á
});

// ‡∏ñ‡πâ‡∏≤ join ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡πà‡∏á‡πÄ‡∏•‡∏¢ (‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ì‡∏µ server ‡πÑ‡∏°‡πà emit 'joined' ‡∏Å‡∏•‡∏±‡∏ö)
// ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞‡πÇ‡∏î‡∏ô global timeout ‡∏õ‡∏¥‡∏î
setTimeout(() => {
  if (!joined) {
    console.warn('‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö joined ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‚Üí ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡∏¢');
    socket.emit('message:send', { roomId, text, type: 'text' });
  }
}, 2000);

// --------- helpers ----------
function cleanupAndExit(code) {
  clearTimeout(globalTimer);
  try { socket.close(); } catch {}
  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ stdout ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà flush
  setTimeout(() => process.exit(code), 150);
}
