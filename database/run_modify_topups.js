const pool = require('../config/db');

async function modifyRiderTopupsTable() {
    try {
        console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á rider_topups...');
        
        // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° column rider_id
        console.log('üìù ‡πÄ‡∏û‡∏¥‡πà‡∏° column rider_id...');
        try {
            await pool.query('ALTER TABLE rider_topups ADD COLUMN rider_id INTEGER');
            console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° column rider_id ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
            if (error.message.includes('already exists')) {
                console.log('‚ÑπÔ∏è  column rider_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
            } else {
                throw error;
            }
        }

        // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rider_id ‡∏à‡∏≤‡∏Å rider_profiles
        console.log('üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rider_id...');
        const updateResult = await pool.query(`
            UPDATE rider_topups 
            SET rider_id = rp.rider_id
            FROM rider_profiles rp
            WHERE rider_topups.user_id = rp.user_id 
            AND rider_topups.rider_id IS NULL
        `);
        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ${updateResult.rowCount} records`);

        // 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° foreign key constraint
        console.log('üîó ‡πÄ‡∏û‡∏¥‡πà‡∏° foreign key constraint...');
        try {
            await pool.query(`
                ALTER TABLE rider_topups 
                ADD CONSTRAINT rider_topups_rider_id_fkey 
                FOREIGN KEY (rider_id) REFERENCES rider_profiles(rider_id)
            `);
            console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° foreign key constraint ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
            if (error.message.includes('already exists')) {
                console.log('‚ÑπÔ∏è  foreign key constraint ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
            } else {
                throw error;
            }
        }

        // 4. ‡πÄ‡∏û‡∏¥‡πà‡∏° index
        console.log('üìä ‡πÄ‡∏û‡∏¥‡πà‡∏° index...');
        try {
            await pool.query('CREATE INDEX IF NOT EXISTS idx_rider_topups_rider_id ON rider_topups(rider_id)');
            console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
            console.log('‚ÑπÔ∏è  index ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
        }

        // 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° comment
        console.log('üí¨ ‡πÄ‡∏û‡∏¥‡πà‡∏° comment...');
        await pool.query("COMMENT ON COLUMN rider_topups.rider_id IS '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å rider_profiles table)'");
        console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° comment ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
        const checkResult = await pool.query(`
            SELECT 
                rt.topup_id,
                rt.user_id,
                rt.rider_id,
                rt.amount,
                rt.status,
                u.display_name,
                rp.id_card_number
            FROM rider_topups rt
            JOIN users u ON rt.user_id = u.user_id
            JOIN rider_profiles rp ON rt.rider_id = rp.rider_id
            ORDER BY rt.topup_id
        `);
        
        console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á:');
        console.table(checkResult.rows);

        console.log('üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á rider_topups ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
        console.error('Stack:', error.stack);
    } finally {
        await pool.end();
    }
}

modifyRiderTopupsTable();